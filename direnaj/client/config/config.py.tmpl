__author__ = 'onur'

DIRENAJ_VIS_ENVIRONMENT = 'development'
DIRENAJ_VIS_HOST = 'localhost'
DIRENAJ_VIS_PORT = {}
DIRENAJ_VIS_PORT['production'] = 19998
DIRENAJ_VIS_PORT['development'] = 19999
DIRENAJ_VIS_PORT['test'] = 20000

#DIRENAJ_APP_HOST = 'localhost'
DIRENAJ_APP_HOST = 'direnaj-staging.cmpe.boun.edu.tr'
DIRENAJ_APP_PORT = {}
DIRENAJ_APP_PORT['production'] = 9998
#DIRENAJ_APP_PORT['development'] = 9999
DIRENAJ_APP_PORT['development'] = 80
DIRENAJ_APP_PORT['test'] = 10000

DIRENAJ_APP_ENVIRONMENT = 'development'

DIRENAJ_AMQP_SERVER = DIRENAJ_APP_HOST
# TODO: setup this from the direnaj-api. LATER. (This is called SETUP process)
DIRENAJ_CLIENT_ID = "client1"

import os, sqlite3
from direnaj.utils.mkdir_p import mkdir_p
import datetime
from lockfile import FileLock

class KeyStore:
    def __init__(self):
        # I chose to share this 'critical' information with all of our clients.
        # I need to write about it later.
        self.app_consumer_key = "SyyLuKNdeJ9lFeItE0Bg"
        self.app_consumer_secret = "eOqzcigVBydHqDTaQLP1fcQY7wFZXPZICIBuIgOnb4"

        # access_token_key and access_token_secret couples
        self.access_tokens = []

        # LOCAL DB SETUP
        dir = os.path.join(os.path.expanduser("~"), '.direnaj')
        mkdir_p(dir)
        db_filename = os.path.join(dir, 'access_tokens.dat')
        self.conn = sqlite3.connect(db_filename)
        self.conn.row_factory = sqlite3.Row

        self.db_cursor = self.conn.cursor()
        self.db_cursor.execute("CREATE TABLE IF NOT EXISTS "
                               "access_tokens "
                               "(key text PRIMARY KEY, "
                               "secret text, "
                               "locked int, "
                               "created_at timestamp, "
                               "updated_at timestamp)")
        # LOCAL DB SETUP END

        # direnaj passwords
        auth_user_id = 'direnaj'
        auth_password = 'tamtam'

        self.direnaj_auth_secrets = { 'auth_user_id':auth_user_id,
                              'auth_password':auth_password}

    def no_access_tokens(self):
        dir = os.path.join(os.path.expanduser("~"), '.direnaj')
        mkdir_p(dir)
        lock_filename = os.path.join(dir, '.lock')
        with FileLock(lock_filename):
            self.db_cursor.execute("SELECT COUNT(*) as n_access_tokens FROM access_tokens WHERE 1 = 1")
            row = self.db_cursor.fetchone()
            if int(row['n_access_tokens']) == 0:
                return True
            else:
                return False

    def acquire_access_tokens(self, n_required_access_tokens=1):
        access_tokens = []
        dir = os.path.join(os.path.expanduser("~"), '.direnaj')
        mkdir_p(dir)
        lock_filename = os.path.join(dir, '.lock')
        with FileLock(lock_filename):
            self.db_cursor.execute("SELECT * FROM access_tokens WHERE locked = 0 LIMIT ?", [n_required_access_tokens])
            rows = self.db_cursor.fetchall()
            updated_at = "%s" % datetime.datetime.now()
            for row in rows:
                self.db_cursor.execute("UPDATE access_tokens SET locked = 1, updated_at = ? WHERE locked = 0 AND key = ?", [updated_at, row['key']])
                access_tokens.append([row['key'], row['secret']])
                self.conn.commit()
        return access_tokens

    def release_access_tokens(self, access_tokens=-1):
        dir = os.path.join(os.path.expanduser("~"), '.direnaj')
        mkdir_p(dir)
        lock_filename = os.path.join(dir, '.lock')
        with FileLock(lock_filename):
            if access_tokens == -1:
                updated_at = "%s" % datetime.datetime.now()
                self.db_cursor.execute(
                    "UPDATE access_tokens SET locked = 0, updated_at = ? WHERE locked = 1",
                    [updated_at]
                )
                self.conn.commit()
            else:
                for access_token in access_tokens:
                    updated_at = "%s" % datetime.datetime.now()
                    self.db_cursor.execute(
                        "UPDATE access_tokens SET locked = 0, updated_at = ? WHERE locked = 1 AND key = ?",
                        [updated_at, access_token[0]])
                    self.conn.commit()

    def insert_access_token(self, key, secret):
        dir = os.path.join(os.path.expanduser("~"), '.direnaj')
        mkdir_p(dir)
        lock_filename = os.path.join(dir, '.lock')
        with FileLock(lock_filename):
            self.db_cursor.execute("SELECT * FROM access_tokens WHERE key = ?", [key])
            row = self.db_cursor.fetchone()
            updated_at = "%s" % datetime.datetime.now()
            if row == None:
                self.db_cursor.execute("INSERT INTO access_tokens VALUES (?, ?, ?, ?, ?) ", [key, secret, 0, updated_at, updated_at])
            else:
                print("Access token already present.")
            self.conn.commit()

    def remove_access_token(self, key, secret):
        dir = os.path.join(os.path.expanduser("~"), '.direnaj')
        mkdir_p(dir)
        lock_filename = os.path.join(dir, '.lock')
        with FileLock(lock_filename):
            self.db_cursor.execute("SELECT * FROM access_tokens WHERE key = ?", [key])
            row = self.db_cursor.fetchone()
            if row != None:
                self.db_cursor.execute("DELETE FROM access_tokens WHERE key = ?", [key])
            else:
                print("Access token already is not found.")
            self.conn.commit()

    # def no_access_tokens(self):
    #     dir = os.path.join(os.path.expanduser("~"), '.direnaj')
    #     mkdir_p(dir)
    #     filename = os.path.join(dir, 'access_tokens.dat')
    #     empty = True
    #     with FileLock(os.path.join(dir, '.lock')):
    #         (all_access_tokens, loaded_access_tokens) = \
    #             self.read_n_access_tokens_from_file(filename)
    #         if all_access_tokens:
    #             empty = False
    #     return empty
    #
    # def load_access_tokens_from_file(self):
    #     dir = os.path.join(os.path.expanduser("~"), '.direnaj')
    #     mkdir_p(dir)
    #     filename = os.path.join(dir, 'access_tokens.dat')
    #     with FileLock(os.path.join(dir, '.lock')):
    #         (all_access_tokens, loaded_access_tokens) = \
    #             self.read_n_access_tokens_from_file(filename, self.n_required_access_tokens)
    #         print ["ALL:"] + all_access_tokens
    #         self.access_tokens = loaded_access_tokens
    #         print ["LOADED: "] + loaded_access_tokens
    #         self.util_write_access_tokens_to_file(all_access_tokens, filename)
    #
    # def store_access_tokens_to_file(self, access_tokens):
    #     dir = os.path.join(os.path.expanduser("~"), '.direnaj')
    #     mkdir_p(dir)
    #     filename = os.path.join(dir, 'access_tokens.dat')
    #     with FileLock(os.path.join(dir, '.lock')):
    #         self.util_write_access_tokens_to_file(access_tokens, filename)
    #
    # def append_access_tokens_to_file(self, access_tokens):
    #     dir = os.path.join(os.path.expanduser("~"), '.direnaj')
    #     mkdir_p(dir)
    #     filename = os.path.join(dir, 'access_tokens.dat')
    #     with FileLock(os.path.join(dir, '.lock')):
    #         (all_access_tokens, tmp) = self.read_n_access_tokens_from_file(filename)
    #         # combine the two lists, making the read one the primary
    #         for x in access_tokens:
    #             add_x = True
    #             for access_token in all_access_tokens:
    #                 if x[0] == access_token[0]:
    #                     add_x = False
    #                     break
    #             if add_x:
    #                 all_access_tokens.append(x)
    #         self.util_write_access_tokens_to_file(all_access_tokens, filename)
    #
    # def clear_access_tokens(self):
    #     self.access_tokens = []
    #     self.store_access_tokens_to_file(self.access_tokens)
    #
    # def read_n_access_tokens_from_file(self, filename, n_required_access_tokens=0):
    #     all_access_tokens = []
    #     access_tokens = []
    #     print "READ: " + filename
    #     try:
    #         f = open(filename, 'r')
    #         n_loaded_access_keys = 0
    #         for line in f.readlines():
    #             els = line.strip().split(',')
    #             if len(els) == 3:
    #                 if int(els[2]) == 0 and n_required_access_tokens > n_loaded_access_keys:
    #                     els[2] = "1"
    #                     access_tokens.append(els)
    #                     n_loaded_access_keys = n_loaded_access_keys + 1
    #             else:
    #                 raise IOError
    #             all_access_tokens.append(els)
    #         f.close()
    #     except IOError, e:
    #         print("File read error.")
    #         return [[], []]
    #     return [all_access_tokens, access_tokens]
    #
    # #dir = os.path.dirname(__file__)
    # def util_write_access_tokens_to_file(self, access_tokens, filename):
    #     print "WRITE: " + filename
    #     try:
    #         f = open(filename, 'w')
    #         for els in access_tokens:
    #             els = [str(x) for x in els]
    #             f.write(",".join(els) + "\n")
    #         f.close()
    #     except IOError, e:
    #         print("File error, could not write current state.")
    #
